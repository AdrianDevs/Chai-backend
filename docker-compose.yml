name: chai

services:
  redis:
    container_name: chai-redis
    hostname: redis
    image: redis:latest
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redisdata:/data
    networks:
      - internal

  db:
    container_name: chai-postgres
    hostname: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal

  adminer:
    container_name: chai-postgres-adminer
    hostname: adminer
    image: adminer
    restart: always
    ports:
      - ${POSTGRES_ADMIN_PORT}:8080
    networks:
      - internal

volumes:
  pgdata:
  redisdata:

networks:
  # everything that is *only* on "internal network" cannot talk to WAN
  internal:
    external: false
  # add this network to a container to make it talk to the rest of the world
  # frontend:
  #   external: true
